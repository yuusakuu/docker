이미지 생성

docker file 없이 이미지 생성 
# ubuntu 컨테이너 실행 및 접속 
docker run -it --name my-ubuntu ubuntu:latest 

# my file 생성 
echo "hello ubuntu" > my_file

# 명령어 저장 및 컨테이너 종료하지 않고 빠져나옴 
control + p, q 

docker commit -a hwkim -m "Add my_file" my-ubuntu my-ubuntu:v1.0.0

# 컨터에니 변경사항이 적용된 새로운 이미지 레이어 확인 
docker image inspect my-ubuntu:v1.0.0


# dockerfile 이용한 이미지 생성 
dockerfile 기반 새 이미지를 생성
dockerfile은 지시어와 지시어에 따른 인자값으로 구성, 이 지시어들이 순차적으로 실행
FROM node:12-alpine
RUN apk add --no-cache python3 g++ make
WORKDIR /app 
COPY.. 
RUN yarn install --production
CMD ["node", "src/index.js"] 

docker file 을 생성하여 이미지를 생성

이 이미지를 기반으로 새로운 컨테이너 생성이 가능 


docker file로 부터 어떻게 이미지를 빌드하는가

# 현재 디렉토리를 빌드 컨텍스트로 my-app:v1 이미지 빌드 (Dockerfile 이용) 
docker build -t my-app:v1 . 
. <- 해당 디렉토리에서 Dockerfile 을 지정함


# -f 옵션을 통해 build 합 dockerfile을 지정 (example/MyDockerfile 이용) 
docker build -t my-app:v1 -f example/MyDockerfile . 

dockerfile로부터 이미지 빌드에 필요한 정보를 도커 데몬에게 전달한다.


.dockerignore 
특정 디렉토리 혹은 파일 목록을 build context에서 제외하기 위한 목적 
*/temp*
*/*/temp*
temp? 

*.md
!README.md

2) docker file 
dockerfile 내 지시어의 의미

FROM : 어떤 베이스 이미지를 사용할 것인지 
LABEL : 이미지의 메타데이터
expose : 문서 용도로 사용, 실제 동작하지는 않음

CMD : 해당 이미지를 통해 컨테이너를 실행할 때 어떤 명령어를 수행할 지 결정

FROM node:12-alpine
LABEL
RUN apk add --no-cache python3 g++ make
WORKDIR /app
COPY . . 
RUN yarn install --production
EXPOSE 80
CMD ["node", "src/index.js"] 



이미지 압축 파일로 저장 및 불러오기 

docker save -o [OUTPUT-FILE] IMAGE

ubuntu 이미지를 my-ubuntu.tar 압축 파일로 저장 
docker save -o my-ubuntu.tar ubuntu


docker load -i [INPUT-FILE] 

ubuntu.tar 압축 파일에서 my-ubuntu 이미지 불러오기 

docker load -i my-ubuntu.tar 



1. tensorflow 이미지를 가져와서 컨테이너 실행 후 디바이스 목록 확인하기 

# tensorflow 이미지 가져오기
docker pull tensorflow/tensorflow:latest

# 도커 실행
docker run -it --name my_tf tensorflow/tensorflow:2.5.1

docker exec -it my_tf bash

# 파이썬 실행 
python 

from tensorflow.python.client import device_lib 
device_lib.list_local_devices()



2. miniconda3 이미지를 가져와서 컨테이너 실행 후 pandas, numpy 버전 확인하기 
# miniconda3 이미지 가져오기
docker pull continuumio/miniconda3:latest

# 미니콘다 이미지로 컨테이너 실행
docker run -it continuumio/miniconda3

# pandas, numpy 버전 확인하기
pip freeze 

# base 환경에 pandas 설치하기 
pip install pandas 


앞서 만든 컨테이너에서 jupyter notebook 실행하기 
docker run -it -p 9090:9090 continuumio/miniconda3 /bin/bash 
jupyter notebook --ip 0.0.0.0 --port 9090 --no-browser --allow-root




Dockerfile 만들기 
기본명령어
FROM 
LABEL 
COPY
RUN 
CMD 
WORKDIR 
EXPOSE
ENV




dockerfile로 부터 docker build 하기 
1. 간단한 Dockerfile 작성하기 

# base image 를 ubuntu 20.04로 설정 
FROM ubuntu:20.04


# apt-get update 명령을 실행 
RUN apt-get update

# docker container 가 시작될 때, "hello ubuntu"를 출력합니다.
CMD ["echo", "Hello Ubuntu"]




Docker build from Dockerfile 

# dockerfile 이 있는 경로에서 도커 이미지 생성
docker build -t my-image:v1.0.0 . 

# 정상 빌드 되었는지 확인 
docker images | grep my-image 




2. docker 파일 작성하기 

Dockerfile 수정하기
nano Dockerfile

# 수정할 내용 입력
FROM python:3.9

RUN apt-get update
RUN apt-get upgrade -y 
RUN apt-get install python3-pip -y

COPY my-ubuntu.tar data/app/my-ubuntu.tar

 
cat Dockerfile

# dockerfile로부터 이미지 생성
docker build -t my-image:v1.0.0 . 
 
# 생성된 이미지로부터 컨테이너 생성
docker run -it -d --name my-cont my-image:v1.0.0 

# 컨테이너 접속  
docker exec -it my-cont bash


# 생성된 라이브러리 조회 
pip freeze

